# Задача №49.
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна

# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))

# Вывод:
# 2.5 10
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]

# обычный спосо решения

def find_farthest_orbit(orbits):
    not_orbits = list(filter(lambda i: i[0] != i[1], orbits)) # Исключаем полностью круглые орбиты(условие)
    result = list(map(lambda  i: i[0] * i[1], not_orbits)) # Производим вычисление площади каждой орбиты
    return not_orbits[result.index(max(result))] # Выдаем ответ, выдав сразу максимальный, с помощью функции max
# Получается что мы обрачщаемся к первому списку кордежей "not_arbits", и через индекс от списка "result", показываем макимальную площадь орбиты

print(*find_farthest_orbit(orbits)) 

# Способ преподавателя 
# max_area_orbit = max(not_orbits, key = lambda x: (x[0] != x[1]) * x[0] * x[1])
# print(*max_area_orbit(orbits))

